{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"JavaScript Data Flow Analyze Tool","body":"**dfatool.js** is a data flow analyze tool for javascript code runs on node.js. \r\n\r\nThe code analyze is based on [Parser API](https://developer.mozilla.org/en/SpiderMonkey/Parser_API) AST, which you can generated with [Esprima](esprima.org). And [Escodegen](https://github.com/Constellation/escodegen) is needed for the final output code regenerate.\r\n\r\n### Install\r\n\r\n\tnpm install dfatool\r\n\r\n### Usage\r\n\r\nUse [Esprima](esprima.org) to generate AST\r\n\t\r\n\tvar ast = esprima.parse(data, {\r\n\t\tloc : true\r\n\t});\r\n\r\nBuild scope for the program\r\n\r\n\tvar globalScope = dfatool.globalScope\r\n\tdfatool.buildScope(ast, globalScope);\r\n\r\n\r\nanalyze the code\r\n\t\r\n\tglobalScope.initialize();\r\n\tglobalScope.derivation();\r\n\r\nGet the variable defined in a specific scope\r\n\t\t\r\n\tvar variable = scope.getDefine(\"variableName\");\r\n\r\nInference the variable's value in a specific position of program\r\n\t\r\n\tvar loc = {\r\n\t\tline : 20,\r\n\t\tcolumn : 20\r\n\t};\r\n\tvar value = variable.inference( scope.offsetLoc(loc) );\r\n\r\nInference the type(`object`,`function`,`array`,`literal`,`expression`)\r\n\t\r\n\tvar type = value.type\r\n\r\nRead property of the value( support prototype chain look up)\r\n\r\n\tvar property = value.access(\"propName.propName\");\r\n\r\nIf the value is an array\r\n\t\r\n\tvar elem = value.access(10);\r\n\r\nIf the value is an function, you can simulate an function call\r\n\r\n\tvar returnedVariable = value.execute(callExprAST, scope);","name":"dfatool","google":""}